(*---------------------------------------------------------------------------
   Copyright (c) 2020 The b0 programmers. All rights reserved.
   Distributed under the ISC license, see terms at the end of the file.
  ---------------------------------------------------------------------------*)

(** B0 opam support. *)

open B00_std

(** [opam] file generation. *)
module File : sig

  (** {1:gen Generic representation} *)

  type value =
    [ `Raw of string | `B of bool | `S of string | `L of bool * value list ]
  (** The type for opam values. In [`L] the boolean indicates whether
      line-by-line rendering should be forced. *)

  type field = string * value
  (** The type for opam fields. The field name and its value. *)

  type section = string * string option * t
  (** The type for opam sections. The section name, the optional string and
      the contents of the section. *)

  and comment = string
  (** The type for comments. *)

  and item = [ `Comment of comment | `Field of field | `Section of section ]
  (** The type for items. *)

  and t = item list
  (** The type for generic opam file contents. *)

  val gen_by : gen:string -> item
  (** [gen_by] is a comment indicating it was generated by generator [gen]. *)

  val v2 : item
  (** [v2] is [opam-version: "2.0"]. *)

  (** {1:formatting Formatting} *)

  val pp : t Fmt.t
  (** [pp] formats file contents. *)

  val to_string : t -> string
  (** [to_string] formats file contents to a string. *)

  (** {1:opam_files [opam] package files} *)

  val of_meta : B0_meta.t -> t
  (** [of_meta m] is an [opam] file from [m]. Here's an account of how
      opam fields are populated by {{!B0_meta.std}standard} and
      {!B0_opam.Meta} keys.
      {ul
      {- ["authors:"], {!B0_meta.authors}.}
      {- ["build:"], {!B0_opam.build}.}
      {- ["bug-report:"], {!B0_meta.issues}.}
      {- ["description:"], {!B0_meta.description}.}
      {- ["dev-repo:"], {!B0_meta.repo}.}
      {- ["doc:"], {!B0_meta.online_doc}.}
      {- ["homepage:"], {!B0_meta.homepage}.}
      {- ["install:"], {!B0_build.install}.}
      {- ["license:"], {!B0_meta.licenses}.}
      {- ["maintainer:"], {!B0_meta.maintainers}.}
      {- ["synopsis:"], {!B0_meta.synopsis}.}
      {- ["tags:"], {!B0_meta.description_tags}.}
      }
      Besides the contents of {!B0_opam.Meta.append_file} is appended
      after the definition of these fields. *)

  val of_pack : B0_pack.t -> t
  (** [of_pack u] XXX explain the details of field inference. For
      derivation could be done meta only but we might use a pack's
      units at some point. *)
end

val tag : unit B0_meta.key
(** [tag] indicates the entity is related to [opam]. *)

(** [opam] B0 metadata. *)
module Meta : sig

  val opam_file_addendum : File.t B0_meta.key
  (** [opam_file_addendum] is an [opam] file fragment appended at the
      end of a generated [opam] file. See {!B0_opam.File.of_meta}. *)

  val build : string B0_meta.key
  (** [build] is an opam [build:] field value. Used to override automatic
      opam file generation. This is a raw string in opam syntax that
      defines the whole field. See {!B0_opam.File.of_meta}. *)

  val install : string B0_meta.key
  (** [install] is an opam [install:] field value. Used to override
      automatic opam file generation. This is a raw string in opam
      syntax that defines the whole field. See
      {!B0_opam.File.of_meta}. *)

  val package : string B0_meta.key
  (** [package] on a build pack specifies that the pack defines the
      package with the given name. *)
end

(** [opam.*] Cmdlets *)
module Cmdlet : sig
  val file : B0_cmdlet.t
  (** [file] is the [opam.file] cmdlet. *)
end

(*---------------------------------------------------------------------------
   Copyright (c) 2020 The b0 programmers

   Permission to use, copy, modify, and/or distribute this software for any
   purpose with or without fee is hereby granted, provided that the above
   copyright notice and this permission notice appear in all copies.

   THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
   WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
   ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
   OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  ---------------------------------------------------------------------------*)
