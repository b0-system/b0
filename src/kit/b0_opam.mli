(*---------------------------------------------------------------------------
   Copyright (c) 2020 The b0 programmers. All rights reserved.
   Distributed under the ISC license, see terms at the end of the file.
  ---------------------------------------------------------------------------*)

(** B0 opam support. *)

open B00_std

(** [opam] file generation. *)
module File : sig

  (** {1:gen Generic representation} *)

  type value =
    [ `Raw of string | `B of bool | `S of string | `L of bool * value list ]
  (** The type for opam values. In [`L] the boolean indicates whether
      line-by-line rendering should be forced. *)

  type field = string * value
  (** The type for opam fields. The field name and its value. *)

  type section = string * string option * t
  (** The type for opam sections. The section name, the optional string and
      the contents of the section. *)

  and comment = string
  (** The type for comments. *)

  and item = [ `Comment of comment | `Field of field | `Section of section ]
  (** The type for items. *)

  and t = item list
  (** The type for generic opam file contents. *)

  val gen_by : gen:string -> item
  (** [gen_by] is a comment indicating it was generated by generator [gen]. *)

  val v2 : item
  (** [v2] is [opam-version: "2.0"]. *)

  (** {1:formatting Formatting} *)

  val pp : t Fmt.t
  (** [pp] formats file contents. *)

  val to_string : t -> string
  (** [to_string] formats file contents to a string. *)

  (** {1:opam_files [opam] package files} *)

  val of_meta : B0_meta.t -> t
  (** [of_meta m] is an [opam] file from [m]. Here's an account of how
      opam fields are populated by {{!B0_meta.std}standard} and
      {!B0_opam.Meta} keys.
      {ul
      {- ["authors:"], {!B0_meta.authors}.}
      {- ["build:"], {!B0_opam.Meta.build}.}
      {- ["bug-report:"], {!B0_meta.issues}.}
      {- ["description:"], {!B0_meta.description}.}
      {- ["depends:"], {!B0_opam.Meta.depends}.}
      {- ["dev-repo:"], {!B0_meta.repo}.}
      {- ["doc:"], {!B0_meta.online_doc}.}
      {- ["homepage:"], {!B0_meta.homepage}.}
      {- ["install:"], {!B0_opam.Meta.install}.}
      {- ["license:"], {!B0_meta.licenses}.}
      {- ["maintainer:"], {!B0_meta.maintainers}.}
      {- ["synopsis:"], {!B0_meta.synopsis}.}
      {- ["tags:"], {!B0_meta.description_tags}.}
      }
      Besides the contents of {!B0_opam.Meta.file_addendum} is appended
      after the definition of these fields. Using {!of_pack} infers
      some of the field if undefined. *)

  val of_pack : B0_pack.t -> t
  (** [of_pack p] is an opam file for pack [p]. This starts by using [p]'s
      metadata as described in {!of_meta} to define the file fields.
      After this with missing:
      {ul
      {- ["synopsis:"] or [description:]. The fields are tentatively
         derived from an existing [README.md] in the scope directory of
         [p]. The first marked up section of the file is extracted, its title
         is parsed according to the pattern '$(NAME) $(SEP) $(SYNOPSIS)' to
         get a synopsis line and the body of the section defines
         the description.}
      {- ["build:"], a locked b0 build of the pack is defined.}} *)
end

val tag : unit B0_meta.key
(** [tag] indicates the entity is related to [opam]. *)

(** [opam] B0 metadata. *)
module Meta : sig

  val build : string B0_meta.key
  (** [build] is an opam [build:] field value. Used to override automatic
      opam file generation. This is a raw string in opam syntax that
      defines the whole field. See {!B0_opam.File.of_meta}. *)

  val depends : string B0_meta.key
  (** [depends] is an opam [depends:] field value. Used to override
      automatic opam file dependency generation. This is a raw string
      in opam syntax that defines the whole field. See
      {!B0_opam.File.of_pack}. *)

  val file_addendum : File.t B0_meta.key
  (** [file_addendum] is an [opam] file fragment appended at the
      end of a generated [opam] file. See {!B0_opam.File.of_meta}. *)

  val install : string B0_meta.key
  (** [install] is an opam [install:] field value. Used to override
      automatic opam file generation. This is a raw string in opam
      syntax that defines the whole field. See
      {!B0_opam.File.of_pack}. *)

  val name : string B0_meta.key
  (** [name] is an [opam] [name:] field value. Use to override
      automatic opam package name generation, see {!B0_opam.name_of_pack}. *)
end

val name_of_pack : B0_pack.t -> string
(** [name_of_pack p] derives an opam package name for [p].
    This is either in order:
    {ol
    {- The {!Meta.name} field of [p]'s meta, if defined.}
    {- The {!B0_meta.basename} of [p] if not equal to ["default"].}
    {- The basename of [p]'s scope directory.}} *)

(** [.opam.*] Cmdlets *)
module Cmdlet : sig
  val file : B0_cmdlet.t
  (** [file] is the [.opam.file] cmdlet. *)

  val list : B0_cmdlet.t
  (** [list] is the [.opam.list] cmdlet. *)
end

(*---------------------------------------------------------------------------
   Copyright (c) 2020 The b0 programmers

   Permission to use, copy, modify, and/or distribute this software for any
   purpose with or without fee is hereby granted, provided that the above
   copyright notice and this permission notice appear in all copies.

   THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
   WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
   ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
   OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  ---------------------------------------------------------------------------*)
