{0:b0 B0 {%html: <span class="version">%%VERSION%%</span>%}}

{b WARNING.} This package is unstable and work in progress, do not
depend on it.

B0 describes software construction and deployments using modular and
customizable definitions written in OCaml.

At the core of B0 is the {{!b0_memo}[b0.memo]} library wich provides
arbitrary build abstraction with reliable, efficient incremental rebuilds.

{1:manuals Manuals}

{2:manuals_all For all users}


- The {{!page-manual}B0 manual} is a conceptual overview of the
   B0 system and B0 files. It is recommended reading.
- The {{!page-action}action manual} describes how to define
   your own actions.
- The {{!page-unit}build unit manual} describes how to
   create your own build units.
- The {{!page-memo}memo manual} describes the [b0.memo] build
   library.
- The {{!page-release}release manual} describes B0 support
   for releasing source software.

{2:manuals_ocaml For OCaml users}

- The {{!page-ocaml}B0 OCaml manual} describes the built-in support
  for handling your OCaml projects.
- The {{!page-opam}B0 opam manual} describes the [opam] support
  to generate opam package files and publish them in repositories.

{2:manuals_dev For B0 developers}

- The {{!page-driver}B0 driver manual} describes
  how to make your own drivers to operate on B0 files.
- The {{!page-todo}TODO} page
- {{!page-old_manual}Old manual fragments} and TODO which will eventually
   disappear.
- The {{!page-rationale}rationale} of B0, written a long time ago but
  still relevant

{1:b0_std Library [b0.std]}

The [b0.std] library has a few things that should be in the stdlib and
a few others that should not be but are useful for B0 based programs
and do not specifically depend on B0.

{2:std Standard needs}

{!modules: B0_std}

{2:codecs Codecs}

{!modules:
B0_base64
B0_html
B0_json
B0_sexp
B0_tar
B0_text
}

{2:view Viewers and editors}

{!modules:
B0_editor
B0_pager
B0_pdf_viewer
B0_web_browser
}

{2:tools Tools}

{!modules:
B0_http
B0_rsync
B0_vcs_repo
}

{1:b0_memo Library [b0.memo]}

The [b0.memo] library implements the build model used by B0. It can be
used for its own good without resorting to the [b0.file] library to
devise domain specific build system â€“ see for example the [brzo] or
[odig] tools.

{!modules:
B0_zero
B0_zero_conv
B0_memo
B0_memo_kit
}

{1:b0_file Library [b0.file]}

This library has the the system for describing software construction
and deployments via {{!page-manual.b0_file}B0 files}.

{!modules:
B0_build_trace
B0_cli
B0_file_exts
B0_srcs
}

{2:def B0 definitions}

{!modules:
B0_action
B0_build
B0_def
B0_dir
B0_env
B0_meta
B0_pack
B0_scope
B0_store
B0_unit
}

{2:driver Driver support}

The following is only needed if you want to process B0 files
your own own way. See the {{!page-driver}driver manual}.

{!modules:
B0_file
B0_driver
}

{1:b0_kit_library Library [b0.kit]}

All the convenience you need for writing B0 files.

{!modules:
B0_kit
B0_cmark
B0_findex
B0_init
B0_os
B0_srcs
B0_web_page
}

{2:vcs VCS and code hosting}

See also {!B0_vcs_repo}.

{!modules:
B0_github
}

{2:testing Testing and releasing}

{!modules:
B0_expect
B0_release
B0_show_url
}

{2:ocaml OCaml support}

{!modules:
B0_dune
B0_jsoo
B0_ocaml
B0_odoc
B0_opam
}

{b Note.} The {!B0_ocaml} module is in fact defined in the [b0.file] library
as it is used to compile [B0.ml] files.
