{0 [b0], occasionally}

The quick hints if you need to use the [b0] tool occasionally.

In [b0] the build is organized into named {e units}. Lists of units
can be gathered into named {e packs}. A unit can be in more than one
pack. In general the repeatable options [-u] and [-p] allow to select
units and packs and [-x] and [-X] to substract from this
selection.

{1:basic Basic}

{2:build How do I build ?}

{@sh[
b0
]}

{2:what What gets build ?}

{@sh[
b0 --what
]}

{2:list What can I build ?}

{@sh[
b0 list
]}

{2:test How do I run tests ?}

{@sh[
b0 list --tests  # List tests
b0 test          # Run all tests
b0 test -l       # Run all tests, including the long ones
b0 test --what   # Show what will run
b0 test -u this -u that  # Only run the 'this' and 'that' tests
b0 test --seed 123 # Run random tests with seed 123
b0 test --correct  # Correct failed snapshot tests
]}

Since tests are executable you can also run them directly. See
{!run}. In particular certain tests may offer specific options,
consult them by invoking the test directly.

{@sh[
b0 -- this_test --help
]}

{2:run How do I run build artefacts ?}

{@sh[
b0 list         # Spot the name of the unit you are interested in
b0 -- mytool …  # Build mytool and run with arguments.
b0 -- mylib     # If mylib is a library gets you in a REPL
b0 -- mymedia   # May be configured to render the media
b0 -b -- mytool …   # Back to build only
]}

{2:bench How do I benchmark an executable ?}

The following forms can be used in order to have up-to-date artefacts
but avoiding timing the build.

{@sh[
time $(b0 --path -- mytool) …
hyperfine "$(b0 --path -- mytool) …"
]}

{2:browser How do I open build artefacts in a browser ?}

{@sh[
b0 -- .show-url mywebsite
b0 -- .show-url --help     # See the different modes of operation
b0 -- mywebsite            # May be configured to open in your browser
]}

{2:show How do I get information about a unit or pack ?}

{@sh[
b0 info mytool
b0 info mypack
]}

{2:lock How can I use the build anywhere ?}

{@sh[
eval $(b0 lock)
cd /any/where/
b0 -- mytool …
]}

{2:adding_src How can I add a new source to the project ?}

{@sh[
b0 init src > module.ml       # Default has OCaml syntax
b0 init src unit.h unit.c     # Uses extensions for syntax
b0 init src -x > example.ml   # Uses CC0-1.0 license
b0 init src --help
]}

{1:build_more More on builds}

{2:parts How do I build specific parts ?}

{@sh[
b0 list            # Spot units names or packs you are interested in
b0 -u mylib -p mypack  # Build unit mylib and units in mypack
b0 -p mypack -x mytool # Build units in mypack without mytool (if applicable)
]}

{2:delete How do I clear the build ?}

{@sh[
b0 delete
b0 delete -a   # Clean
]}

{2:log How do I see build steps ?}

{@sh[
b0 log
b0 log -l
]}

{2:log_by_dur Which build steps take time ?}

{@sh[
b0 log -d
]}

{2:log_fail Which build steps failed ?}

{@sh[
b0 log -e
]}

{2:log_unrevived Which build steps did really execute ?}

{@sh[
b0 log -u
]}
